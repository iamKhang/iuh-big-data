input {
  # TCP input cho Docker logs
  tcp {
    port => 5000
    codec => json
  }
  # HTTP input cho các ứng dụng gửi logs qua HTTP
  http {
    port => 5044
    codec => json
  }
  # Thêm các input mới với port khác để tránh xung đột
  tcp {
    port => 5001
    codec => json
  }
  http {
    port => 5045
    codec => json
  }
  # Thêm input để thu thập logs từ file
  file {
    path => "/var/log/docker/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
    tags => ["docker"]
  }
}

filter {
  # Xử lý logs từ service rng
  if [container_name] =~ /rng/ {
    mutate {
      add_field => {
        "service" => "rng",
        "component" => "dockercoins"
      }
    }
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp}\s+%{LOGLEVEL:log_level}\s+%{GREEDYDATA:log_message}" }
      tag_on_failure => ["grok_failure_rng"]
    }
    # Thêm thông tin về request nếu có
    if [log_message] =~ /GET|POST|PUT|DELETE/ {
      grok {
        match => { "log_message" => "%{WORD:http_method} %{URIPATHPARAM:request_path} %{GREEDYDATA}" }
        tag_on_failure => ["grok_failure_rng_http"]
      }
    }
  }
  # Xử lý logs từ service hasher
  else if [container_name] =~ /hasher/ {
    mutate {
      add_field => {
        "service" => "hasher",
        "component" => "dockercoins"
      }
    }
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp}\s+%{LOGLEVEL:log_level}\s+%{GREEDYDATA:log_message}" }
      tag_on_failure => ["grok_failure_hasher"]
    }
    # Thêm thông tin về hash operation nếu có
    if [log_message] =~ /Computing hash/ {
      grok {
        match => { "log_message" => "Computing hash of %{GREEDYDATA:hash_input}" }
        tag_on_failure => ["grok_failure_hasher_hash"]
      }
    }
  }
  # Xử lý logs từ service worker
  else if [container_name] =~ /worker/ {
    mutate {
      add_field => {
        "service" => "worker",
        "component" => "dockercoins"
      }
    }
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp}\s+%{LOGLEVEL:log_level}\s+%{GREEDYDATA:log_message}" }
      tag_on_failure => ["grok_failure_worker"]
    }
    # Thêm thông tin về coin nếu có
    if [log_message] =~ /Coin found/ {
      grok {
        match => { "log_message" => "Coin found: %{WORD:coin_hash}" }
        tag_on_failure => ["grok_failure_worker_coin"]
      }
      mutate {
        add_field => { "event_type" => "coin_found" }
      }
    }
  }
  # Xử lý logs từ service webui
  else if [container_name] =~ /webui/ {
    mutate {
      add_field => {
        "service" => "webui",
        "component" => "dockercoins"
      }
    }
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp}\s+%{LOGLEVEL:log_level}\s+%{GREEDYDATA:log_message}" }
      tag_on_failure => ["grok_failure_webui"]
    }
    # Thêm thông tin về request nếu có
    if [log_message] =~ /GET|POST|PUT|DELETE/ {
      grok {
        match => { "log_message" => "%{WORD:http_method} %{URIPATHPARAM:request_path} %{GREEDYDATA}" }
        tag_on_failure => ["grok_failure_webui_http"]
      }
    }
  }
  # Xử lý logs từ các service khác
  else {
    mutate {
      add_field => { "component" => "other" }
    }
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp}\s+%{LOGLEVEL:log_level}\s+%{GREEDYDATA:log_message}" }
      tag_on_failure => ["grok_failure_other"]
    }
  }

  # Chuyển đổi timestamp thành trường @timestamp
  date {
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
    tag_on_failure => ["date_parse_failure"]
  }

  # Thêm thông tin về log level
  if [log_level] {
    mutate {
      add_field => { "log_severity" => "%{log_level}" }
    }
  }

  # Thêm thông tin về host
  mutate {
    add_field => { "environment" => "docker-swarm" }
  }
}

output {
  # Gửi logs đến Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "dockercoins-%{+YYYY.MM.dd}"
    document_type => "_doc"
    manage_template => true
    template_overwrite => true
  }
  # Hiển thị logs ra stdout để debug
  stdout { codec => rubydebug }
}
